/**
 * –°–∏–Ω—Ç–∞–∫—Å–∏—Å async/await
 * try...catch
 */

const sum = (a, b) => {
  return a + b;
};

// console.log('‚úÖ First');
// console.log(sum(10, 20));
// console.log('‚úÖ Second');

const BASE_URL = 'https://jsonplaceholder.typicode.com/users';
// #region
//? –ó–∞–ø–∏—Ç –∑–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ —ñ –æ–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —á–µ—Ä–µ–∑ async/await
// const fetchUsers = async () => {
//   try {
//     const response = await fetch(BASE_URL);

//     if (!response.ok) {
//       throw new Error(response.status);
//     }

//     const data = await response.json();

//     console.log(data);
//   } catch (error) {
//     alert('–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ!');
//   }
// };

// console.log('üßô‚Äç‚ôÇÔ∏è First');
// fetchUsers();
// console.log('üßô‚Äç‚ôÇÔ∏è Second');

// #endregion

// #region
//? –ó–∞–ø–∏—Ç –∑–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ —ñ –æ–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —á–µ—Ä–µ–∑ async/await —Ç–∞ then()/catch()
const fetchUsers = async () => {
  const response = await fetch(BASE_URL);

  if (!response.ok) {
    throw new Error(response.status);
  }

  return response.json();
};

// fetchUsers()
//   .then(data => {
//     console.log(data);
//   })
//   .catch(err => {
//     console.log(err);
//   });

// #endregion

// #region
//? –ü–µ—Ä–µ–ø–∏—à–∏ –Ω–∞ async/await
const loadPosts = () => {
  return fetch('https://jsonplaceholder.typicode.com/posts').then(response => {
    if (!response.ok) {
      throw new Error(response.status);
    }

    return response.json();
  });
};

// loadPosts()
//   .then(data => {
//     console.log(data);
//   })
//   .catch(error => {
//     console.log(error);
//   });

// #endregion

// #region
async function wait() {
  await new Promise(resolve => setTimeout(resolve, 1000));

  return 10;
}

//? –Ñ ¬´–∑–≤–∏—á–∞–π–Ω–∞¬ª —Ñ—É–Ω–∫—Ü—ñ—è. –Ø–∫ –º–æ–∂–Ω–∞ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –Ω–µ—ó –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è async-—Ñ—É–Ω–∫—Ü—ñ—ó?
function f() {
  // –©–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç–∏, —â–æ–± –≤–∏–∫–ª–∏–∫–∞—Ç–∏ wait()
  // —ñ –¥–æ—á–µ–∫–∞—Ç–∏—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É "10" –≤—ñ–¥ async-—Ñ—É–Ω–∫—Ü—ñ—ó
  // –Ω–µ –∑–∞–±—É–≤–∞–π—Ç–µ, —â–æ —Ç—É—Ç –Ω–µ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ "await"
}

// f();
// #endregion
